<?php

namespace UsersBundle\Repository;

/**
 * UserPersonalInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserPersonalInfoRepository extends \Doctrine\ORM\EntityRepository
{
    use \BaseBundle\Repository\BaseRepository;


    function findUser($filter, $returnQueryBuilder = false, $order = []) {
        $qb = $this->createQueryBuilder('u');
        $qb->select('u');

        if (array_key_exists('disabled', $filter)) {
            $qb->andWhere('u.disabled = :disabled')->setParameter('disabled', $filter['disabled']);
        }

        if (array_key_exists('isOperator', $filter)) {
            $qb->leftJoin('u.personSubType', 'pst');
            $qb->andWhere($qb->expr()->eq('pst.bnomKey', ':operator'))->setParameter('operator','operator');
        }

        if (array_key_exists('personType', $filter)) {
            $qb->leftJoin('u.personType', 'pt');
            $qb->andWhere($qb->expr()->eq('pt.bnomKey', ':personType'))->setParameter('personType', $filter['personType']);
        }

        if (!empty($filter['name'])) {
            $qb->leftJoin('u.user', 'uname');
            $qb->andWhere($qb->expr()->orX(
               // $qb->expr()->like('u.email', ':name'),
                $qb->expr()->like('u.lastName', ':name'),
                $qb->expr()->like('u.firstName', ':name'),
                $qb->expr()->like('uname.username', ':name'),
                $qb->expr()->like('u.middleName', ':name'),

                $qb->expr()->like('CONCAT(u.firstName, \' \', u.lastName)', ':name')
            ))->setParameter('name', '%'.$filter['name'].'%');
            $qb->addOrderBy('u.firstName', 'ASC');

        }

        if (array_key_exists('withUser', $filter)) {
            $qb->leftJoin('u.user', 'i');

            if (array_key_exists('withUser', $filter)) {
                if ($filter['withUser']) {
                    $qb->andWhere($qb->expr()->isNotNull('i.id'));
                } else {
                    $qb->andWhere($qb->expr()->isNull('i.id'));
                }
            }
        }
        if (!empty($filter['role'])) {
            $qb->leftJoin('u.personSubType', 'r');
            $temp = array_filter(is_array($filter['role']) ? $filter['role'] : [$filter['role']]);
            foreach ($temp as $i=>&$tmp) {
                $qb->setParameter('roles_'.$i, '%'.$tmp.'%');
                $tmp = $qb->expr()->like('r.bnomKey', ':roles_'.$i);
            }
            $expr = call_user_func_array([$qb->expr(), 'orX'], $temp);
            $qb->andWhere($expr);
        }
        if (!empty($order)) {
            foreach($order as $col => $orderType) {
                $qb->addOrderBy('u.'.$col, $orderType);    
            }
            
        }
        //dump($qb->getQuery()->getDql());exit;
        //echo $qb->getQuery()->getDql();print_r($qb->getParameters());exit;
        return $returnQueryBuilder ? $qb : $qb->getQuery()->getResult();
    }

}
