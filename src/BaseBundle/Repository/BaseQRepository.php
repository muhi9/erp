<?php

namespace BaseBundle\Repository;


use Doctrine\ORM\EntityManager;
use Psr\Container\ContainerInterface;
use UsersBundle\Entity\User;

/**
 * BaseQRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseQRepository {


 /**
     * @var EntityManager
     */
    private $entityManager;
    private $qb;
    private $query;
    private $connection;
    private $classMeta;
    private $container;


    /**
     * @param EntityManager $entityManager
     */
    public function __construct(EntityManager $entityManager,ContainerInterface $container) {
        $this->entityManager = $entityManager;
        $this->connection = $this->entityManager->getConnection();
        $this->container = $container;
    }

    /**
     * @return EntityManager
     */
    public function getEntityManager() {
        return $this->entityManager;
    }

    /**
     * @return \Doctrine\DBAL\Connection
     */
    public function getConnection() {
        return $this->getEntityManager()->getConnection();
    }

    public function getResult($query) {
      $res = $this->entityManager->createQuery($query);
      return $res->getResult();
    }

    /**
    *@ function getAlias
    *@ params:
    *@ (array) $tables
    */

    private function getAlias($tables=false) {
        $join = 'j';
        if(!empty($tables)){
        $alias = 'q';
            foreach ($tables as $key => $value) {
                $alias.=','.$join;
                $join.='j';
            }
        }else{
            $alias = 'q';
        }

        return $alias;
    }

    /**
    *@ function join
    *@ params:
    *@ (array) $data
    */

    private function join($data) {
        $jAlias ='j';
        foreach ($data as $key => $value) {
          $this->query->join('q.'.$key,$jAlias);
          if(isset($value['criteries'])&&!empty($value['criteries'])){
                $this->criteria($value['criteries'],$jAlias);
            }
           $jAlias.='j';
          }
    }


    /**
    *@ function Criteria
    *@ params:
    *@ (array) $criteries
    */

    private function criteria($criteries,$alias='q') {
        $nq = 0;
        foreach ($criteries as $key => $value) {
           $nq++;
            switch ($key) {
               case 'between':
                    foreach ($value as $field => $val) {

                        $this->query->andWhere(
                            $this->qb->expr()->between($alias.'.'.$field,"'".$val['from']."'","'".$val['to']."'")
                        );
                    }
                   break;
                case 'gt':
                    foreach ($value as $field => $val) {
                         $this->query->andWhere($this->qb->expr()->gt($alias.'.'.$field,'?'.$nq))->setParameter($nq, $val);

                    }
                   break;
                case 'lt':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere($this->qb->expr()->lt($alias.'.'.$field,'?'.$nq))->setParameter($nq, $val);
                    }
                   break;
                    case 'gte':
                    foreach ($value as $field => $val) {
                         $this->query->andWhere($this->qb->expr()->gte($alias.'.'.$field,'?'.$nq))->setParameter($nq, $val);
                    }
                   break;
                case 'lte':
                    foreach ($value as $field => $val) {

                        $this->query->andWhere($this->qb->expr()->lte($alias.'.'.$field,'?'.$nq))->setParameter($nq,$val);
                    }
                   break;
                case 'in':
                    //$field is field name
                    //$val must be array
                    foreach ($value as $field => $val) {
                        if(is_array($val)){
                          $this->query->andWhere($this->qb->expr()->in($alias.'.'.$field,'?'.$nq))->setParameter($nq,$val);
                        }

                    }
                   break;
                case 'notIn':
                    //$field is field name
                    //$val must be array
                    foreach ($value as $field => $val) {
                     if(is_array($val)){
                      $this->query->andWhere($this->qb->expr()->notIn($alias.'.'.$field,'?'.$nq))->setParameter($nq,$val);
                     }

                    }
                   break;
                case 'like':
                    foreach ($value as $field => $val) {
                        //$val = is_string($val)?$this->connection->quote($val):$val;

                        $this->query->andWhere($this->qb->expr()->like($alias.'.'.$field, '?'.$nq))->setParameter($nq,"%{$val}%");


                    }
                   break;
                    case 'slike':
                    foreach ($value as $field => $val) {
                        //$val = is_string($val)?$this->connection->quote($val):$val;
                       // $this->query->andWhere($this->qb->expr()->like($alias.'.'.$field,'?'.$nq))->setParameter($nq,$this->qb->expr()->literal('%'.$val));
                       $this->query->andWhere($this->qb->expr()->like($alias.'.'.$field,'?'.$nq))->setParameter($nq,"%{$val}");

                    }
                   break;
               default:
                      $value = is_string($value)?$this->connection->quote($value):$value;
                      $this->query->andWhere($alias.'.'.$key.'=?'.$nq)->setParameter($nq,$value);
                    break;
           }
        }
    }


    /**
    *@ function readList
    *@ params:
    *@ (array) $data
    */
    /*
    example $data
    $data['table'] = "AppBundle:User";
    $data['criteries'] = array('field'=>'value'); where username = user
    $data['criteries']['like'] = array('field'=>'value'); where username like '%user%'
    join:
    $data['join'] = array('JoinField'=>
                            array('criteries'=>array('field'=>'value','field'=>'value'))//if not have criteries set only true,
                          'OtherJoinField'=>true


    )
    */
    public function nomTypeList($data){
        $data['table'] = 'BaseBundle\Entity\NomType';
        return $this->_readList($data);
    }

    public function baseNomList($data){
        $data['table'] = 'BaseBundle\Entity\BaseNoms';
        return $this->_readList($data);
    }


    private function _readList($data) {
        $alias = $this->getAlias(isset($data['join'])?$data['join']:false);
        $this->qb = $this->entityManager->createQueryBuilder();
        $this->query = $this->qb->select($alias);

        $this->query = $this->qb->from($data['table'],' q');

        if(isset($data['criteries'])&&!empty($data['criteries'])){
            $this->criteria($data['criteries'],'q');
        }

        if(isset($data['join'])&&!empty($data['join'])){
            $this->join($data['join']);
        }

        if(isset($data['order'])&&!empty($data['order'])){
            $this->qb->orderBy('q.'.key($data['order']), current($data['order']));

        }

        if(isset($data['limit'])&&!empty($data['limit'])){
            $this->qb->setMaxResults($data['limit']);
        }

        if(isset($data['offset'])&&!empty($data['offset'])){
            $this->qb->setFirstResult($data['offset']);
        }



        //dump($this->query->getQuery());exit;
  //      die();
        return  $this->query->getQuery()->getResult();
    }


    /**
    *@ function setClassMeta (preparation data)
    *@ params:
    *@ tableName $data
    *@ return metaData
    */

    private function setClassMeta($table){
      $result = [];
      $this->classMeta = $this->entityManager->getClassMetadata($table);
      $result = $this->classMeta->getTableName();
      return $result;

    }
    /**
    *@ function writePreparation (preparation data for insert)
    *@ params:
    *@ (array) $data
    *@ return array
    */

    private function writePreparation($data){
      $result = [];

      foreach ($this->classMeta->getAssociationMappings() as $name => $relation) {
        if (!$this->classMeta->isInheritedAssociation($name)){
            if(isset($relation['joinColumns'])){
              foreach ($relation['joinColumns'] as $joinColumn) {
                  if(array_key_exists($name,$data)){
                    $data[$joinColumn['name']] = $data[$name];
                    unset($data[$name]);
                  }
              }
            }

        }
      }

      $result =$data;

      return $result;

    }

    /**
    *@ function write
    *@ params:
    *@ (array) $data
    *@ return id
    */
    /*
    example $data
    $data['table'] = "AppBundle:User";
    $data['data'] = array('field'=>value);
    */
    public function write($data,$where=false){
        //$data['table'] = $this->setClassMeta($data['table']);
        $data['table'] = $this->setClassMeta('BaseBundle\Entity\BaseNoms');
        //$data['table'] = 'BaseBundle\Entity\BaseNoms';
        $data['value'] = $this->writePreparation($data['value']);

        $result = false;
        if(!empty($data)){
          if($where){
            $where = $this->writePreparation($where);

            if(!isset($data['value']['updated_by'])){
              $data['value']['updated_by'] = $this->container->get('security.token_storage')->getToken()->getUser()->getId();
            }
            if(!isset($data['value']['updated_at'])){
              $data['value']['updated_at'] =date('Y-m-d H:i:s');
            }
            $this->connection->update($data['table'],$data['value'],$where);
          }else{
            if(!isset($data['value']['created_by'])){
              $data['value']['created_by'] = $this->container->get('security.token_storage')->getToken()->getUser()->getId();
            }
            if(!isset($data['value']['created_at'])){
              $data['value']['created_at'] =date('Y-m-d H:i:s');
            }
            $this->connection->insert($data['table'],$data['value']);
          }
          $result = $this->connection->lastInsertId();
        }
        return $result;

    }

}
